package com.ekagra.mcpstarter.service;

import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Service;

import com.ekagra.mcpstarter.config.LangChainConfig;
import com.ekagra.mcpstarter.model.LLMResponse;
import com.ekagra.mcpstarter.model.MCPMessage;
import com.ekagra.mcpstarter.model.MCPResponse;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.JsonMappingException;
import com.fasterxml.jackson.databind.ObjectMapper;

@Service
public class QueryService implements QueryLLMService{
    
    private static Logger logger = LoggerFactory.getLogger(QueryService.class);


    private final LangChainConfig langChainConfig;

    private final DatabaseService databaseService;

    public QueryService(LangChainConfig langChainConfig, DatabaseService databaseService) {
        this.langChainConfig = langChainConfig;
        this.databaseService = databaseService;
    }
    
    @Override
    public String generateLLMResponse(String prompt) {
        String response = langChainConfig.openAiChatModel().chat(prompt);
        return response;
    }

    public LLMResponse buildPromptAndQueryLLM(MCPMessage message) {
        StringBuilder builder = new StringBuilder();

        
        builder.append("You are an expert in writing MySql database queries.\n");
        builder.append("You are given a table with the following schema:\n\n");
        builder.append("Table Name: ").append(message.getTableName()).append("\n");
        builder.append("Columns:\n");

        List<Map<String, Object>> schema = databaseService.getTableSchema(message.getTableName());
        for (Map<String, Object> column : schema) {
            String columnName = (String) column.get("COLUMN_NAME");
            String dataType = (String) column.get("DATA_TYPE");
            builder.append("- ").append(columnName).append(" (").append(dataType).append(")\n");
        }

        builder.append("\n");
        
        builder.append("User Request: ").append(message.getQuery()).append("\n\n");
        // Additional instruction for response formatting
        builder.append("Important:\n");
        builder.append("- Your response must strictly be a JSON object.\n");
        builder.append("- The JSON must have exactly two fields: 'sqlQuery' and 'responseText'.\n");
        builder.append("- Example response format:\n");
        builder.append("{\"sqlQuery\": \"<generated SQL query>\", \"responseText\": \"<human readable explanation>\"}\n");
        builder.append("- Do not include any explanations outside the JSON.\n");
        builder.append("- Keep SQL simple and correct based on the schema provided.\n");
        builder.append("- Assume the SQL query has been executed and the results are available and the 'responseText' will answers the user's question naturally, using the result.\n");

        logger.info("LLM prompt : \n {}",builder);
    
        String llmResponse = generateLLMResponse(builder.toString());

        ObjectMapper objectMapper = new ObjectMapper();
        LLMResponse responseDTO = new LLMResponse();

        try {
            // Try to parse the LLM JSON response
            responseDTO = objectMapper.readValue(llmResponse, LLMResponse.class);
            
        } catch (JsonMappingException e) {
            // JSON structure was wrong
            logger.error("Failed to map LLM response to MCPResponse. Invalid structure.", e);
            
            // Optionally, set a fallback
            responseDTO.setSqlQuery("");
            responseDTO.setResponseText("Failed to generate a valid response. Please try again.");
            
        } catch (JsonProcessingException e) {
            // LLM response was not valid JSON
            logger.error("Failed to parse LLM response JSON.", e);
            
            responseDTO.setSqlQuery("");
            responseDTO.setResponseText("Invalid response format received from LLM.");
        }



        return responseDTO;    // A human explanation generated by LLM or manually
        
        }

    public MCPResponse processUserQuery(MCPMessage message){

        LLMResponse llmResponse = buildPromptAndQueryLLM(message);
        List<Map<String, Object>> queryResult = databaseService.runQuery(llmResponse.getSqlQuery());
        MCPResponse mcpResponse = new MCPResponse();
        mcpResponse.setSqlQuery(llmResponse.getSqlQuery());
        mcpResponse.setResponseText(llmResponse.getResponseText());
        mcpResponse.setQueryResult(queryResult);

        return mcpResponse;
    }
}
